# frozen_string_literal: true

require 'shellwords'
require_relative '.template/lib/errors'
require_relative '.template/lib/cli'
require_relative '.template/lib/utils'

@source_paths ||= []
@template_root = __FILE__.match?(%r{\Ahttps?://}) ? Template::Util.remote_repo_dir : __dir__

@cli = Template::Cli.new
@template_errors = Template::Errors.new

# Variables
APP_NAME = app_name

# Transform the app name from slug to human-readable name e.g. nimble-web -> Nimble
APP_NAME_HUMANIZED = app_name.split(/[-_]/).map(&:capitalize).join(' ').gsub(/ Web$/, '')
DOCKER_REGISTRY_HOST = 'docker.io'
DOCKER_IMAGE = "nimblehq/#{APP_NAME}"
RUBY_VERSION = '3.0.1'
POSTGRES_VERSION = '12.1'
REDIS_VERSION = '5.0.7'

# Variants
API_VARIANT = options[:api] || ENV['API'] == 'true'
WEB_VARIANT = !API_VARIANT

if WEB_VARIANT
  NODE_VERSION = '16.13.2'
  NODE_SOURCE_VERSION = '16' # Used in Dockerfile https://github.com/nodesource/distributions
end

# Addons
DEFAULT_ADDONS = {
  docker: 'Docker',
  heroku: 'Heroku',
  github: 'Github along with Github Action'
}.freeze

INSTALL_SEMAPHORE_ADDON = @cli.install_addon?('SemaphoreCI')
INSTALL_NGINX_ADDON = @cli.install_addon?('Nginx')
INSTALL_PHRASEAPP_ADDON = @cli.install_addon?('PhraseApp')
INSTALL_DEVISE_ADDON = @cli.install_addon?('Devise')

def apply_single_addon!(addon)
  addon_template_path = ".template/addons/#{addon}/template.rb"

  abort 'This addon is not supported' unless File.exist?(File.expand_path(addon_template_path, @template_root))

  apply addon_template_path
end

def apply_template!
  use_source_path @template_root

  apply_base_template!

  # Add-ons - [Default]
  DEFAULT_ADDONS.each_key do |addon|
    apply ".template/addons/#{addon}/template.rb"
  end

  @cli.post_default_addons_install(DEFAULT_ADDONS)

  # Add-ons - [Optional]
  apply '.template/addons/semaphore/template.rb' if INSTALL_SEMAPHORE_ADDON
  apply '.template/addons/nginx/template.rb' if INSTALL_NGINX_ADDON
  apply '.template/addons/phrase_app/template.rb' if INSTALL_PHRASEAPP_ADDON
  apply '.template/addons/devise/template.rb' if INSTALL_DEVISE_ADDON

  # Variants
  apply '.template/variants/api/template.rb' if API_VARIANT
  apply '.template/variants/web/template.rb' if WEB_VARIANT

  # A list necessary jobs that run before complete, ex: Fixing rubocop on Ruby files that generated by Rails
  apply '.template/hooks/before_complete/template.rb'
end

def apply_base_template!
  template 'Gemfile.tt', force: true

  copy_file '.flayignore'
  copy_file 'Dangerfile'
  copy_file '.rubocop.yml'
  copy_file '.reek.yml'

  template '.ruby-gemset.tt'
  template '.ruby-version.tt', force: true
  template '.tool-versions.tt'
  copy_file '.editorconfig'
  copy_file 'Procfile'
  copy_file 'Procfile.dev'
  template 'README.md.tt', force: true

  apply 'bin/template.rb'
  apply 'config/template.rb'
  apply '.gitignore.rb'

  after_bundle do
    use_source_path @template_root

    # Stop the spring before using the generators as it might hang for a long time
    # Issue: https://github.com/rails/spring/issues/486
    run 'spring stop'

    apply 'spec/template.rb'
  end
end

# Set Thor::Actions source path for looking up the files
def source_paths
  @source_paths
end

# Prepend the required paths to the source paths to make the template files in those paths available
def use_source_path(source_path)
  @source_paths.unshift(source_path)
end

if (selected_addon = ENV['ADDON'])
  apply_single_addon!(selected_addon)
else
  apply_template!
end

@cli.print_error_message(@template_errors)
